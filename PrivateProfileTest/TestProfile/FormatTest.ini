
この行のように、想定しないフォーマットの行は単に無視される。

# コメントのテスト ----------------------------------------

[Comment]
; コメントとして認識される。
;Key1=Value1
; コメントとして認識される。
#

[CommentFail]
; コメントとして認識されない。コメントを開始できるのは行頭のみ。
Key3=Velue3 ; This is not comment.
; コメントとして認識されない。コメントを開始できるのは行頭のみ。
 #Key4=Velue4

# セクションのテスト ----------------------------------------

; セクションとして認識される。
[Section]
Key1=Value1
; セクションとして認識される。既出の同名セクションと合成される。
[Section]
Key2=Value2
; セクションとして認識されるが、大文字小文字は区別されるため既出の "Section" とは合成されない。
[section]
Key3=Value3
; セクションとして認識されるが、空白も通常の文字と同等に扱われるため既出の "Section" とは合成されない。
[	S e c t i o n	]
Key4=Value4
; セクションとして認識される
[[#;Section;#]]
Key5=Value5
; " " というセクションとして認識される。
[ ]
Key6=Value6
; セクションとして認識される。（キー・値よりもセクションのパースが優先される。）
[Key=Value]
Key7=Value7

; セクションとして認識されない。
[]
Key8=Value8
; セクションとして認識されない。行頭が '[' ではないため。
 [SectionFail]
Key9=Value9
; セクションとして認識されない。行末が ']' ではないため。
[SectionFail] 
Key10=Value10

# キーのテスト ----------------------------------------

[Key]
; キーとして認識される。
Key1=Value1A
; キーとして認識される。同一セクション内でキーが重複する場合でもいずれかの値を取得できるが、どの値になるかは選べない。
Key1=Value1B
; キーとして認識される。大文字と小文字は区別されるため、既出の Key1 とは重複しない。
KEY1=VALUE1
; "\tKey2 " というキーとして認識される。
	Key2 =Value2
; "[#;Key3;#]" というキーとして認識される。
[#;Key3;#]=Value3
; キーとして認識される。値は空文字。
Key4=
; " " というキーとして認識される。
 =Value5

[KeyFail]
; キーとして認識されない。
=Value6
; キーとして認識されない。
Key7:Value7
; キーとして認識されない。キー・値よりもセクションのパースが優先されるため、これは "Key8]=[Value8" というセクションとして認識される。
[Key8]=[Value8]

# 文字列値のテスト ----------------------------------------

[StringValue]
; std::string の値（"Value1"）として取得できる。
Key1=Value1
; ！！要注意！！ std::string の値として取得できるが、キー : "Key2"、値 : "Value 2" ではなく、キー : "Key2 "、値 : " Value 2" となる。空白に注意。
Key2 = Value 2
; std::string の値（"\"Value3\""）として取得できる。
Key3="Value3"
; std::string の値（"'Value4'"）として取得できる。
Key4='Value4'
; std::string の値（"=;#[]\\\\\t"）として取得できる。
Key5==;#[]\\	
; std::string の値（" "）として取得できる。
Key6= 
; std::string の値（空文字列）として取得できる。
Key7=

# 整数値のテスト ----------------------------------------

[IntegerValue]
; int, uint unsignd char 等の値として取得できる。但し char 等としては範囲外のため取得できない。
Key1=234
; int 等の型として取得できる。但し unsigned int, char, unsigned char 等としては範囲外のため取得できない。
Key2=-234
; int 等の値として取得できる。但し8進数の 7777 ではなく10進数の 7777 と認識される。
Key3=07777

[IntegerValueFail]
; 整数値として取得できない。
Key4=234.0
; 整数値として取得できない。
Key5=100,000,000
; 整数値として取得できない。
Key6=100'000'000
; 整数値として取得できない。
Key7=100 000 000
; 整数値として取得できない。
Key8=0xFFFF
; 整数値として取得できない。
Key9=0b1111
; 整数値として取得できない。余計な空白があってはならない。
Key10= 234
; 整数値として取得できない。余計な空白があってはならない。
Key11=234 

# 浮動小数点数値のテスト ----------------------------------------

[FloatValue]
; float, double の値として取得できる。
Key1=2.34
; float, double の値として取得できる。
Key2=-2.34
; float, double の値として取得できる。
Key3=234
; float, double の値として取得できる。
Key4=234e3
; float, double の値として取得できる。
Key5=234e+3
; float, double の値として取得できる。
Key6=234e-3

[DoubleValue]
; double の値として取得できる。float としても取得はできるが精度が足りない分は丸められる。
Key7=1.234567890123456789
; double の値として取得できる。float としては範囲外のため取得できない。
Key8=2.34e+100
; double の値として取得できる。float としては範囲外のため取得できない。
Key9=2.34e-100

[FloatDoubleValueFail]
; float や double の値として取得できない。余計な空白があってはならない。
Key10= 2.34
; float や double の値として取得できない。余計な空白があってはならない。
Key11=2.34 

# ブーリアン値のテスト ----------------------------------------

[BooleanValue]
; bool の値として取得できる。
Key1=true
; bool の値として取得できる。
Key2=false

[BooleanValueFail]
; bool の値として取得できない。
Key3=True
; bool の値として取得できない。
Key4=TRUE
; bool の値として取得できない。
Key5=False
; bool の値として取得できない。
Key6=FALSE
; bool の値として取得できない。
Key7=0
; bool の値として取得できない。
Key8=1
; bool の値として取得できない。余計な空白があってはならない。
Key9= true
; bool の値として取得できない。余計な空白があってはならない。
Key10=false 

# std::array 値のテスト ----------------------------------------

[ArrayValue]
; ',' をデリミタとして指定し、要素数 3 以下の std::array<int, 3> などとして取得できる。
Key1=2,3,4
; ' ' をデリミタとして指定し、要素数 3 以下の std::array<float, 3> などとして取得できる。
Key2=2.3 4.5 6.7
; '\t' をデリミタとして指定し、要素数 2 以下の std::array<bool, 2> などとして取得できる。
Key3=true	false
; ';' をデリミタとして指定し、要素数 2 以下の std::array<std::string, 2> などとして取得できる。
Key4=https://example.com/foo;https://example.com/bar
; 適当なデリミタを指定し、要素数 1 の std::array<int, 1> などとして取得できる。
Key5=234
; ',' をデリミタとして指定し、std::array<std::string, 3> として取得できる。
Key6=,,

[ArrayValueFail]
; std::array<int, 4> として取得できない。
; 但し std::array<int, 1> や std::array<std::string, 3> として取得できる。
Key7=2,3.0,true
; std::array<int, 4> として取得できない。空文字列を int にパースできないため。
; 但し、std::array<int, 3> や std::array<std::string, 4> として取得できる。
Key8=2,3,4,
; std::array<int, 3> として取得できない。空文字列を int にパースできないため。
; 但し、std::array<int, 1> や std::array<std::string, 3> として取得できる。
Key9=2,,4
; std::array<int, 3> として取得できない。余計な空白があってはならない。
; 但し、std::array<std::string, 3> として取得できる。
Key10=2, 3, 4

# std::vector 値のテスト ----------------------------------------

[VectorValue]
; ',' をデリミタとして指定し、std::vector<int> などとして取得できる。
Key1=2,3,4
; ' ' をデリミタとして指定し、std::vector<float> などとして取得できる。
Key2=2.3 4.5 6.7
; '\t' をデリミタとして指定し、std::vector<bool> として取得できる。
Key3=true	false
; ';' をデリミタとして指定し、std::vector<std::string> として取得できる。
Key4=https://example.com/foo;https://example.com/bar
; 適当なデリミタを指定し、std::vector<int> などとして取得できる。
Key5=234
; ',' をデリミタとして指定し、std::vector<std::string> として取得できる。
Key6=,,

[VectorValueFail]
; std::vector<int> として取得できない。
; 但し std::vector<std::string> として取得できる。
Key7=2,3.0,true
; std::vector<int> として取得できない。空文字列を int にパースできないため。
; 但し、std::vector<std::string> として取得できる。
Key8=2,3,4,
; std::vector<int> として取得できない。空文字列を int にパースできないため。
; 但し、std::vector<std::string> として取得できる。
Key9=2,,4
; std::vector<int> として取得できない。余計な空白があってはならない。
; 但し、std::vector<std::string> として取得できる。
Key10=2, 3, 4
